import { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0); // state mặc định là 0

  return (
    <div>
      <p>Bạn đã bấm {count} lần</p>
      <button onClick={() => setCount(count + 1)}>Tăng</button>
    </div>
  );
}





import { useState, useEffect } from "react";

function Users() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    // Gọi API khi component mount
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []); // [] = chỉ chạy 1 lần

  return (
    <ul>
      {users.map(u => <li key={u.id}>{u.name}</li>)}
    </ul>
  );
}






import { createContext, useContext } from "react";

const ThemeContext = createContext("light");

function Child() {
  const theme = useContext(ThemeContext);
  return <p>Theme hiện tại: {theme}</p>;
}

function App() {
  return (
    <ThemeContext.Provider value="dark">
      <Child />
    </ThemeContext.Provider>
  );
}




import { useRef } from "react";

function InputFocus() {
  const inputRef = useRef();

  const handleFocus = () => {
    inputRef.current.focus(); // focus vào input
  };

  return (
    <div>
      <input ref={inputRef} placeholder="Nhập gì đó..." />
      <button onClick={handleFocus}>Focus Input</button>
    </div>
  );
}






import { useReducer } from "react";

function reducer(state, action) {
  switch(action.type) {
    case "increment": return { count: state.count + 1 };
    case "decrement": return { count: state.count - 1 };
    default: return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <>
      <p>{state.count}</p>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </>
  );
}




import { useState, useMemo } from "react";

function ExpensiveCalc({ num }) {
  const result = useMemo(() => {
    console.log("Tính toán lại...");
    return num * 2; 
  }, [num]);

  return <p>Kết quả: {result}</p>;
}




import { useState, useCallback } from "react";

function Button({ onClick }) {
  console.log("Render Button");
  return <button onClick={onClick}>Click</button>;
}

function App() {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log("Clicked!");
  }, []); // ghi nhớ hàm, không tạo mới mỗi lần render

  return (
    <>
      <p>{count}</p>
      <button onClick={() => setCount(c => c + 1)}>Tăng</button>
      <Button onClick={handleClick} />
    </>
  );
}


























